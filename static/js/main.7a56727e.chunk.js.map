{"version":3,"sources":["component/Snippet.js","component/TimeConvert.js","component/Thumbnails.js","component/makeCard.js","component/Fetch.js","component/UrlSetting.js","component/ChangePage.js","component/HandlePagination.js","page/Favorite.js","page/Home.js","App.js","serviceWorker.js","index.js"],"names":["Snippet","item","snippet","title","className","description","TimeConvert","yt_duration","extracted","exec","parseInt","Thumbnails","style","backgroundImage","thumbnails","medium","url","width","height","position","Date","contentDetails","duration","toISOString","substr","makeCard","data","items","map","index","key","id","Fetch","useState","isLoaded","setIsLoaded","nextPageToken","setNextPageToken","prevPageToken","setPrevPageToken","videos","setvideos","useEffect","fetch","then","response","json","catch","error","console","log","message","UrlSetting","youtubeApi","URL","parameters","URLSearchParams","part","chart","maxResults","regionCode","search","href","ChangePage","handleClick","originUrl","setUrl","isPageChanged","setIsPageChanged","nextPage","prevPage","HandlePagination","activePage","setActivePage","page","j","perPageVideos","i","itemsCountPerPage","totalItemsCount","onChange","pageNumber","Favorite","favorites","handleUnlike","video","onClick","Home","handleLike","event","alert","margin","disabled","marginBottom","innerClass","itemClass","linkClass","activeLinkClass","value","App","setFavorites","textDecoration","to","path","filter","length","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a56727e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Snippet = ({ item }) => {\r\n  return (\r\n    <div>\r\n      <h4>{item.snippet.title}</h4>\r\n      <div className=\"hideContent\">\r\n        Description : {item.snippet.description}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Snippet;\r\n","/* 將影片時間轉成MMSS */\r\n//refer from https://gist.github.com/Fauntleroy/5167736\r\nconst TimeConvert = (yt_duration) => {\r\n  const time_extractor = /([0-9]*H)?([0-9]*M)?([0-9]*S)?$/;\r\n  const extracted = time_extractor.exec(yt_duration);\r\n  const hours = parseInt(extracted[1], 10) || 0;\r\n  const minutes = parseInt(extracted[2], 10) || 0;\r\n  const seconds = parseInt(extracted[3], 10) || 0;\r\n  return hours * 3600 * 1000 + minutes * 60 * 1000 + seconds * 1000;\r\n};\r\nexport default TimeConvert;\r\n","import React from \"react\";\r\nimport TimeConvert from \"../component/TimeConvert\";\r\n\r\nconst Thumbnails = ({ item }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: `url(${item.snippet.thumbnails.medium.url})`,\r\n        width: \"320px\",\r\n        height: \"180px\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <div className=\"durationDiv\">\r\n        {new Date(TimeConvert(item.contentDetails.duration))\r\n          .toISOString()\r\n          .substr(14, 5)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Thumbnails;\r\n","import React from \"react\";\r\nimport Snippet from \"../component/Snippet\";\r\nimport Thumbnails from \"../component/Thumbnails\";\r\n\r\nconst makeCard = (data) => {\r\n  return data.items.map((item, index) => (\r\n    <div key={item.id}>\r\n      <Thumbnails item={item} />\r\n      <Snippet item={item} />\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default makeCard;\r\n","import { useState, useEffect } from \"react\";\r\nimport makeCard from \"./makeCard\";\r\n\r\nfunction Fetch(url) {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [nextPageToken, setNextPageToken] = useState(\"\");\r\n  const [prevPageToken, setPrevPageToken] = useState(\"\");\r\n\r\n  /* 抓出來的影片資料，50個 */\r\n  const [videos, setvideos] = useState([]);\r\n\r\n  /* 取得資料，包括上下頁的參數、影片資料*/\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setIsLoaded(true);\r\n        setNextPageToken(data.nextPageToken);\r\n        setPrevPageToken(data.prevPageToken);\r\n        setvideos(makeCard(data));\r\n      })\r\n      .catch((error) => console.log(\"error: \" + error.message));\r\n  }, [url]);\r\n\r\n  return { isLoaded, nextPageToken, prevPageToken, videos };\r\n}\r\n\r\nexport default Fetch;\r\n","function UrlSetting() {\r\n  /* 設定api網址 */\r\n  const youtubeApi = new URL(\"https://www.googleapis.com/youtube/v3/videos\");\r\n  const parameters = new URLSearchParams({\r\n    part: \"snippet,contentDetails\",\r\n    chart: \"mostPopular\",\r\n    maxResults: \"15\",\r\n    regionCode: \"TW\",\r\n    key: \"AIzaSyCuO1gJqTpIqC8TOSZWAFS-o3tn-I4yuAw\",\r\n  });\r\n\r\n  youtubeApi.search = parameters;\r\n  const url = youtubeApi.href;\r\n\r\n  return url;\r\n}\r\n\r\nexport default UrlSetting;\r\n","import { useState } from \"react\";\r\nimport Fetch from \"../component/Fetch\";\r\nimport UrlSetting from \"../component/UrlSetting\";\r\n\r\nfunction ChangePage(handleClick) {\r\n  const originUrl = UrlSetting();\r\n\r\n  //設定不同頁數的url\r\n  const [url, setUrl] = useState(originUrl);\r\n\r\n  //代入api網址後取回值\r\n  const { isLoaded, nextPageToken, prevPageToken, videos } = Fetch(url);\r\n\r\n  /* 只能兩頁(限定100個影片) */\r\n  const [isPageChanged, setIsPageChanged] = useState(false);\r\n\r\n  /* 用youtube Api的上下頁功能取下50個影片資料 */\r\n  const nextPage = () => {\r\n    setUrl(`${originUrl}&pageToken=${nextPageToken}`);\r\n    //   console.log(url);\r\n    setIsPageChanged(!isPageChanged);\r\n  };\r\n  const prevPage = () => {\r\n    setUrl(`${originUrl}&pageToken=${prevPageToken}`);\r\n\r\n    //  console.log(url);\r\n    setIsPageChanged(!isPageChanged);\r\n  };\r\n\r\n  return { isLoaded, isPageChanged, nextPage, prevPage, videos };\r\n}\r\n\r\nexport default ChangePage;\r\n","import { useState } from \"react\";\r\n\r\nconst HandlePagination = (videos) => {\r\n  /* 用套件react-js-pagination做出頁碼、換頁等功能 */\r\n  const [activePage, setActivePage] = useState(1);\r\n  const itemsCountPerPage = 12;\r\n  const totalItemsCount = 50;\r\n  const onChange = (pageNumber) => {\r\n    setActivePage(pageNumber);\r\n  };\r\n  let page = [];\r\n  for (let j = 0; j < totalItemsCount / itemsCountPerPage; j++) {\r\n    page[j] = itemsCountPerPage * j;\r\n  }\r\n  let perPageVideos = [];\r\n  for (let i = page[activePage - 1]; i < itemsCountPerPage * activePage; i++) {\r\n    perPageVideos[i] = videos[i];\r\n  }\r\n  return {\r\n    perPageVideos,\r\n    activePage,\r\n    itemsCountPerPage,\r\n    totalItemsCount,\r\n    onChange,\r\n  };\r\n};\r\n\r\nexport default HandlePagination;\r\n","import React from \"react\";\r\n\r\nconst Favorite = ({ favorites, handleUnlike }) => {\r\n  return (\r\n    <div>\r\n      {favorites[0] ? (\r\n        favorites.map((item, index) => (\r\n          <div className=\"video\" key={index}>\r\n            {item.video}\r\n            <div className=\"unlikeBtnDiv\">\r\n              <button\r\n                className=\"unlikeBtn\"\r\n                onClick={() => handleUnlike(item.id)}\r\n              >\r\n                Unlike\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <h1>NO FAVORITE VIDEOS</h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Favorite;\r\n","import React from \"react\";\r\nimport ChangePage from \"../component/ChangePage\";\r\nimport HandlePagination from \"../component/HandlePagination\";\r\n\r\n/* pagination實現頁碼 */\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nconst Home = ({ handleClick }) => {\r\n  //取得各50個影片\r\n  const { isLoaded, isPageChanged, nextPage, prevPage, videos } = ChangePage();\r\n\r\n  const handleLike = (event) => {\r\n    handleClick(event);\r\n    alert(\"Like\");\r\n  };\r\n\r\n  //總共50個影片，一頁12個，分5頁顯示，可換頁\r\n  const {\r\n    perPageVideos,\r\n    activePage,\r\n    itemsCountPerPage,\r\n    totalItemsCount,\r\n    onChange,\r\n  } = HandlePagination(videos);\r\n\r\n  return (\r\n    <div>\r\n      {!isLoaded ? (\r\n        <div>lodaing...</div>\r\n      ) : (\r\n        <div className=\"App\">\r\n          <div style={{ margin: \"30px 45px\" }}>\r\n            <button\r\n              className=\"pageBtn\"\r\n              onClick={prevPage}\r\n              disabled={!isPageChanged}\r\n            >\r\n              PREV 50 VIDEOS\r\n            </button>\r\n            <button\r\n              className=\"pageBtn\"\r\n              onClick={nextPage}\r\n              disabled={isPageChanged}\r\n            >\r\n              NEXT 50 VIDEOS\r\n            </button>\r\n          </div>\r\n          <div style={{ marginBottom: \"30px\" }}>\r\n            <Pagination\r\n              activePage={activePage}\r\n              itemsCountPerPage={itemsCountPerPage}\r\n              totalItemsCount={totalItemsCount}\r\n              onChange={onChange}\r\n              innerClass=\"innerClass\"\r\n              itemClass=\"itemClass\"\r\n              linkClass=\"linkClass\"\r\n              activeLinkClass=\"activeLinkClass\"\r\n            />\r\n          </div>\r\n          <div className=\"wrap flex\">\r\n            {perPageVideos.map((item, index) => (\r\n              <div className=\"video\" key={index}>\r\n                {item}\r\n                <div className=\"likeBtnDiv\">\r\n                  <button\r\n                    className=\"likeBtn\"\r\n                    onClick={handleLike}\r\n                    value={index}\r\n                  >\r\n                    LIKE\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\nimport ChangePage from \"./component/ChangePage\";\nimport HandlePagination from \"./component/HandlePagination\";\nimport \"./App.css\";\nimport Favorite from \"./page/Favorite\";\nimport Home from \"./page/Home\";\n\n/* Router實現最愛頁 */\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  //取得各50個影片\n  const { videos } = ChangePage();\n\n  //總共50個影片，一頁12個，分5頁顯示，可換頁\n  const { perPageVideos } = HandlePagination(videos);\n\n  /* 收藏功能 */\n  const [favorites, setFavorites] = useState([]);\n\n  const handleClick = (event) => {\n    setFavorites([\n      ...favorites,\n      { id: favorites.length, video: perPageVideos[event.target.value] },\n    ]);\n  };\n\n  const handleUnlike = (id) => {\n    setFavorites(favorites.filter((item) => item.id !== parseInt(id)));\n  };\n\n  return (\n    <Router>\n      <nav>\n        <div className=\"flex\">\n          <h1 className=\"padding\">\n            <Link style={{ textDecoration: \"none\" }} to=\"/\">\n              HOME\n            </Link>\n          </h1>\n          <h1 className=\"padding\">\n            <Link style={{ textDecoration: \"none\" }} to=\"/favorite\">\n              FAVORITE\n            </Link>\n          </h1>\n        </div>\n      </nav>\n      <div className=\"center\">\n        <Switch>\n          <Route path=\"/favorite\">\n            <Favorite favorites={favorites} handleUnlike={handleUnlike} />\n          </Route>\n          <Route path=\"/\">\n            <Home handleClick={handleClick} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}