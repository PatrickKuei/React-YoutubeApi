{"version":3,"sources":["component/Favorite.js","component/Snippet.js","component/Thumbnails.js","component/Home.js","App.js","serviceWorker.js","index.js"],"names":["Favorite","favorite","Snippet","item","snippet","title","className","description","Thumbnails","styles","durationDiv","position","bottom","right","color","backgroundColor","padding","likeBtnDiv","top","style","backgroundImage","thumbnails","medium","url","width","height","Date","yt_duration","extracted","exec","parseInt","convertYouTubeDuration","contentDetails","duration","toISOString","substr","Home","useState","isLoaded","setIsLoaded","nextPageToken","setNextPageToken","prevPageToken","setPrevPageToken","youtubeAPI","setUrl","video","setvideo","isPageChanged","setIsPageChanged","useEffect","fetch","then","response","json","data","items","map","index","key","id","activePage","setActivePage","page","j","videos","i","margin","onClick","disabled","marginBottom","itemsCountPerPage","totalItemsCount","onChange","pageNumber","innerClass","itemClass","linkClass","activeLinkClass","App","textDecoration","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53e7ec3a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Favorite = ({ favorite }) => {\r\n  return <h1>{favorite}</h1>;\r\n};\r\n\r\nexport default Favorite;\r\n","import React from \"react\";\r\n\r\nconst Snippet = ({ item }) => {\r\n  return (\r\n    <div>\r\n      <h4>{item.snippet.title}</h4>\r\n      <div className=\"content hideContent\">\r\n        Description : {item.snippet.description}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Snippet;\r\n","import React from \"react\";\r\n\r\nconst Thumbnails = ({ item }) => {\r\n  /* 將影片時間轉成MMSS */\r\n  const convertYouTubeDuration = (yt_duration) => {\r\n    const time_extractor = /([0-9]*H)?([0-9]*M)?([0-9]*S)?$/;\r\n    const extracted = time_extractor.exec(yt_duration);\r\n    const hours = parseInt(extracted[1], 10) || 0;\r\n    const minutes = parseInt(extracted[2], 10) || 0;\r\n    const seconds = parseInt(extracted[3], 10) || 0;\r\n    return hours * 3600 * 1000 + minutes * 60 * 1000 + seconds * 1000;\r\n  };\r\n\r\n  /* CSS樣式 */\r\n  const styles = {\r\n    durationDiv: {\r\n      position: \"absolute\",\r\n      bottom: \"10px\",\r\n      right: \"10px\",\r\n      color: \"white\",\r\n      backgroundColor: \"rgba(0%,0%,0%,0.8)\",\r\n      padding: \"1px 8px\",\r\n    },\r\n    likeBtnDiv: {\r\n      position: \"absolute\",\r\n      top: \"5px\",\r\n      right: \"10px\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: \"url(\" + item.snippet.thumbnails.medium.url + \")\",\r\n        width: \"320px\",\r\n        height: \"180px\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <div style={styles.likeBtnDiv}>\r\n        <button className=\"likeBtn\">LIKE</button>\r\n      </div>\r\n      <div style={styles.durationDiv}>\r\n        {new Date(convertYouTubeDuration(item.contentDetails.duration))\r\n          .toISOString()\r\n          .substr(14, 5)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Thumbnails;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Snippet from \"./Snippet\";\r\nimport Thumbnails from \"./Thumbnails\";\r\n\r\n/* pagination實現頁碼 */\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nconst Home = () => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  const [nextPageToken, setNextPageToken] = useState(\"\");\r\n  const [prevPageToken, setPrevPageToken] = useState(\"\");\r\n\r\n  /* 設定api網址 */\r\n  const youtubeAPI = \"https://www.googleapis.com/youtube/v3/videos\";\r\n  const part = \"?part=snippet,contentDetails\";\r\n  const chart = \"&chart=mostPopular\";\r\n  const maxResults = \"&maxResults=50\";\r\n  const key = \"&key=AIzaSyA9IcwlgqRJrwC0m8Le26ptHngk6rYCVX4\";\r\n  const [url, setUrl] = useState(youtubeAPI + part + chart + maxResults + key);\r\n\r\n  /* 抓出來的影片資料，50個 */\r\n  const [video, setvideo] = useState([]);\r\n\r\n  /* 只能兩頁(限定100個影片) */\r\n  const [isPageChanged, setIsPageChanged] = useState(false);\r\n\r\n  /* 取得資料，包括上下頁的參數、影片資料*/\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setIsLoaded(true);\r\n        setNextPageToken(data.nextPageToken);\r\n        setPrevPageToken(data.prevPageToken);\r\n        setvideo(\r\n          data.items.map((item, index) => (\r\n            <div key={item.id} className=\"video\">\r\n              {/* <button onClick={handleFavorite} id={index}>\r\n                {index}\r\n              </button> */}\r\n              <Thumbnails item={item} />\r\n              <Snippet item={item} />\r\n            </div>\r\n          ))\r\n        );\r\n      });\r\n  }, [url]);\r\n\r\n  /* 用youtube Api的上下頁功能取下50個影片資料 */\r\n  /* 已知BUG：讀取很慢，有時有效；有時沒效 */\r\n  const nextPage = () => {\r\n    setUrl(url + \"&pageToken=\" + nextPageToken);\r\n    setIsPageChanged(!isPageChanged);\r\n  };\r\n  const prevPage = () => {\r\n    setUrl(url + \"&pageToken=\" + prevPageToken);\r\n    setIsPageChanged(!isPageChanged);\r\n  };\r\n\r\n  /* 用套件react-js-pagination做出頁碼、換頁等功能 */\r\n  const [activePage, setActivePage] = useState(1);\r\n  const itemsCountPerPage = 12;\r\n  const totalItemsCount = 50;\r\n  const handlePageChange = (pageNumber) => {\r\n    setActivePage(pageNumber);\r\n  };\r\n  let page = [];\r\n  for (let j = 0; j < totalItemsCount / itemsCountPerPage; j++) {\r\n    page[j] = itemsCountPerPage * j;\r\n  }\r\n  let videos = [];\r\n  for (let i = page[activePage - 1]; i < itemsCountPerPage * activePage; i++) {\r\n    videos[i] = video[i];\r\n  }\r\n\r\n  /* 沒做出來的收藏功能 */\r\n  const favorite = [];\r\n  const handleFavorite = (e) => {\r\n    if (favorite.length > 0) {\r\n      favorite.map((item) =>\r\n        item.key !== videos[e.target.id].key\r\n          ? favorite.push(videos[e.target.id])\r\n          : console.log(\"same video, need be deleted\")\r\n      );\r\n    } else {\r\n      console.log(\"no favorite\");\r\n      /* favorite.push(videos[e.target.id]); */\r\n\r\n      /* Don't know how to handle it, video will have data after couple times re-render, but this push method won't wait that,\r\n      so favorite will be undefined and then can't be mapped and show error */\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!isLoaded ? (\r\n        <div>lodaing...</div>\r\n      ) : (\r\n        <div className=\"App\">\r\n          <div style={{ margin: \"30px 45px\" }}>\r\n            <button\r\n              className=\"pageBtn\"\r\n              onClick={prevPage}\r\n              disabled={!isPageChanged}\r\n            >\r\n              PREV 50 VIDEOS\r\n            </button>\r\n            <button\r\n              className=\"pageBtn\"\r\n              onClick={nextPage}\r\n              disabled={isPageChanged}\r\n            >\r\n              NEXT 50 VIDEOS\r\n            </button>\r\n          </div>\r\n          <div style={{ marginBottom: \"30px\" }}>\r\n            <Pagination\r\n              activePage={activePage}\r\n              itemsCountPerPage={itemsCountPerPage}\r\n              totalItemsCount={totalItemsCount}\r\n              onChange={handlePageChange}\r\n              innerClass=\"innerClass\"\r\n              itemClass=\"itemClass\"\r\n              linkClass=\"linkClass\"\r\n              activeLinkClass=\"activeLinkClass\"\r\n            />\r\n          </div>\r\n          <div className=\"wrap flex\">{videos.map((item) => item)}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Favorite from \"./component/Favorite\";\nimport Home from \"./component/Home\";\n\n/* Router實現最愛頁 */\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const favorite = \"\";\n\n  return (\n    <Router>\n      <nav>\n        <div className=\"flex\">\n          <h1 className=\"padding\">\n            <Link style={{ textDecoration: \"none\" }} to=\"/\">\n              HOME\n            </Link>\n          </h1>\n          <h1 className=\"padding\">\n            <Link style={{ textDecoration: \"none\" }} to=\"/favorite\">\n              FAVORITE\n            </Link>\n          </h1>\n        </div>\n      </nav>\n      <div className=\"center\">\n        <Switch>\n          <Route path=\"/favorite\">\n            <Favorite favorite={favorite} />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}